package com.huawei.it.sdcloud.core.configuration;

import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.TypeUtils;
import com.sun.jndi.rmi.registry.RegistryContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.AutoConfigureOrder;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

/**
 * 理论上使用新版 JDK 和 FastJson 不会有反序列化漏洞
 * 本文件用于补充设置，在低版本环境中，也能获得安全防护
 * 如果有冲突，可以删除本类的代码
 *
 * 另外，使用 FastJson 转换对象时，不建议写：
 * Object simpleObject = JSON.parseObject(JsonString);
 * 建议尽可能，精确指定对象类型：
 * SimpleVO simpleObject = JSON.parseObject(JsonString, SimpleVO.class);
 */
@Configuration
@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)
public class FastJsonConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(FastJsonConfiguration.class);

    static {
        // 转换 Json 对象时，禁止自动转换类型
        ParserConfig.getGlobalInstance().setAutoTypeSupport(false);
        ParserConfig.getGlobalInstance().setSafeMode(true);
        TypeUtils.clearClassMapping();
        // 禁止从远程 URL 加载对象
        System.setProperty("com.sun.jndi.rmi.object.trustURLCodebase", "false");
        System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase", "false");
        resetRmiTrustURLCodebase(false);
        resetLdapTrustURLCodebase(false);
        logger.info("completed");
    }

    private static void resetRmiTrustURLCodebase(Boolean trustURLCodebase) {
        try {
            Field[] fields = RegistryContext.class.getDeclaredFields();
            for (Field field : fields) {
                if (field.getName().equals("trustURLCodebase")) {
                    field.setAccessible(true);
                    Field modifiers = Field.class.getDeclaredField("modifiers");
                    modifiers.setAccessible(true);
                    modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);
                    field.setBoolean(null, trustURLCodebase);
                }
            }
        } catch (Exception e) {
            logger.error("resetRmiTrustURLCodebase", e);
        }
    }

    private static void resetLdapTrustURLCodebase(Boolean trustURLCodebase) {
        try {
            Class<?> versionHelper12 = Class.forName("com.sun.naming.internal.VersionHelper12");
            Field[] fields = versionHelper12.getDeclaredFields();
            for (Field field : fields) {
                if (field.getName().equals("trustURLCodebase")) {
                    field.setAccessible(true);
                    Field modifiers = Field.class.getDeclaredField("modifiers");
                    modifiers.setAccessible(true);
                    modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);
                    field.set(null, trustURLCodebase.toString());
                }
            }
        } catch (Exception e) {
            logger.error("resetRmiTrustURLCodebase", e);
        }
    }

}
