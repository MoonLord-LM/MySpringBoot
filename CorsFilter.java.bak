/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2017-2021. All rights reserved.
 */

package com.huawei.cloud.zuul.gateway.filters.pre;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.cors.CorsConfiguration;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * 跨域访问过滤器
 * 默认允许所有从 .huawei.com 来的跨域请求
 *
 * 要注意，不能直接拦截和处理所有的 Options 请求，WebDAV 相关的请求头同样需要使用到 Options 请求
 * 例如 Excel 在线编辑：ms-excel:ofe|u| + 文件地址
 */
@Component
@RefreshScope
public class CorsFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(CorsFilter.class);

    private static final String[] DEFAULT_TRUST_DOMAIN_SUFFIXES = new String[] {
            ".huawei.com"
    };

    private static final String[] DEFAULT_EXPOSE_HEADERS = new String[] {
            HttpHeaders.ACCEPT_RANGES,
            HttpHeaders.CACHE_CONTROL,
            HttpHeaders.CONTENT_LANGUAGE,
            HttpHeaders.CONTENT_LENGTH,
            HttpHeaders.CONTENT_RANGE,
            HttpHeaders.CONTENT_TYPE,
            HttpHeaders.ETAG,
            HttpHeaders.EXPIRES,
            HttpHeaders.LAST_MODIFIED,
            HttpHeaders.PRAGMA
    };

    private static final CopyOnWriteArrayList<String> trustDomainSuffixes = new CopyOnWriteArrayList<>();

    private static final CopyOnWriteArrayList<String> exposeHeaders = new CopyOnWriteArrayList<>();

    /**
     * 允许的请求来源的域名后缀（不区分大小写）
     */
    @Value("#{'${sdcloud.zuul.cors.trustDomainSuffixes:}'.split(',')}")
    private void setTrustDomainSuffixes(List<String> configTrustDomainSuffixes){
        logger.info("setTrustDomainSuffixes configTrustDomainSuffixes: {}", configTrustDomainSuffixes);
        try {
            trustDomainSuffixes.clear();
            for (String configTrustDomainSuffix : configTrustDomainSuffixes) {
                String trustDomainSuffix = configTrustDomainSuffix.trim().toLowerCase(Locale.ROOT);
                if (!StringUtils.isEmpty(trustDomainSuffix)) {
                    trustDomainSuffixes.add(trustDomainSuffix);
                }
            }
            if(CollectionUtils.isEmpty(trustDomainSuffixes)){
                trustDomainSuffixes.addAll(Arrays.asList((DEFAULT_TRUST_DOMAIN_SUFFIXES)));
            }
        }
        catch (Exception e) {
            logger.error("setTrustDomainSuffixes error", e);
        }
        logger.info("setTrustDomainSuffixes ok: {}", trustDomainSuffixes);
    }

    /**
     * 允许客户端读取的响应头
     */
    @Value("#{'${sdcloud.zuul.cors.exposeHeaders:}'.split(',')}")
    private void setExposeHeaders(List<String> configExposeHeaders){
        logger.info("setExposeHeaders configExposeHeaders: {}", configExposeHeaders);
        try {
            exposeHeaders.clear();
            for (String configExposeHeader : configExposeHeaders) {
                String exposeHeader = configExposeHeader.trim();
                if (!StringUtils.isEmpty(exposeHeader)) {
                    exposeHeaders.add(exposeHeader);
                }
            }
            if(CollectionUtils.isEmpty(exposeHeaders)){
                exposeHeaders.addAll(Arrays.asList((DEFAULT_EXPOSE_HEADERS)));
            }
        }
        catch (Exception e) {
            logger.error("setExposeHeaders error", e);
        }
        logger.info("setExposeHeaders ok: {}", exposeHeaders);
    }

    @Override
    public void init(FilterConfig filterConfig) {
        logger.info("init");
    }

    @Override
    public void destroy() {
        logger.info("destroy");
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain fc) throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        try {
            boolean trusted = false;
            String origin = httpRequest.getHeader(HttpHeaders.ORIGIN);
            if (!StringUtils.isEmpty(origin)) {
                logger.info("doFilter origin: {}", origin);
                httpResponse.setHeader(HttpHeaders.ORIGIN, origin);

                URI originURI = new URI(origin);
                String originHost = originURI.normalize().getHost().toLowerCase(Locale.ROOT);
                if (!StringUtils.isEmpty(originHost)) {
                    logger.info("doFilter originHost: {}", originHost);
                    httpResponse.setHeader(HttpHeaders.ORIGIN + "-" + HttpHeaders.HOST, originHost);
                    for (String trustDomainSuffix : trustDomainSuffixes) {
                        if (originHost.endsWith(trustDomainSuffix)) {
                            // Access-Control-Allow-Origin，允许的请求来源
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);

                            // Access-Control-Allow-Credentials，允许请求携带 Cookie
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");

                            // Access-Control-Max-Age，允许跨域策略的缓存时间（10 分钟）
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, String.valueOf(600));

                            // Access-Control-Expose-Headers，允许客户端读取的响应头
                            if (!CollectionUtils.isEmpty(exposeHeaders)) {
                                httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, StringUtils.collectionToDelimitedString(exposeHeaders, ", "));
                            }

                            // Access-Control-Allow-Methods，允许的请求方法（根据 Access-Control-Request-Method 处理）
                            String allowMethods = httpRequest.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD);
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, String.valueOf(allowMethods));
                            if (StringUtils.isEmpty(allowMethods)) {
                                allowMethods = CorsConfiguration.ALL;
                            }
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, allowMethods);

                            // Access-Control-Allow-Headers，允许的请求头（根据 Access-Control-Request-Headers 处理）
                            String allowHeaders = httpRequest.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS);
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS, String.valueOf(allowHeaders));
                            if (StringUtils.isEmpty(allowHeaders)) {
                                allowHeaders = CorsConfiguration.ALL;
                            }
                            httpResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, allowHeaders);

                            // 有 Origin 的 Options 请求，直接返回 200
                            if(HttpMethod.OPTIONS.matches(httpRequest.getMethod())) {
                                httpResponse.setStatus(200);
                                httpResponse.setContentType("text/html; charset=utf-8");
                                httpResponse.getWriter().print("SDCloud - Zuul - CorsFilter : allow options request");
                                httpResponse.getWriter().flush();
                                return;
                            }

                            // 其它请求仍然继续处理
                            trusted = true;
                            break;
                        }
                    }
                }
                if(!trusted) {
                    logger.error("doFilter finish, untrusted origin: {}", origin);
                }
            }
        }
        catch (Exception e) {
            logger.error("doFilter error", e);
        }

        fc.doFilter(request, response);
    }

}
